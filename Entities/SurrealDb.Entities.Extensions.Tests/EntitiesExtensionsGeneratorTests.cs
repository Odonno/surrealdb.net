using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using SurrealDb.Net;
using Xunit;

namespace SurrealDb.Entities.Extensions.Tests;

public class EntitiesExtensionsGeneratorTests
{
    private const string OriginSourceCodeText = """
        using SurrealDb.Net;
        using SurrealDb.Net.Models;
        using SurrealDb.Net.Attributes.Entities;
        using System.ComponentModel.DataAnnotations.Schema;

        [EntitiesGeneratorRecordsFromNamespace("SurrealDb.Examples.Entities.Models")]
        public class MyEntitiesGenerator;

        namespace SurrealDb.Examples.Entities.Models
        {
            public class Vector3
            {
                public float X { get; set; }
                public float Y { get; set; }
                public float Z { get; set; }
            }
            
            [Table("post")]
            public class Post : Record;
            
            public class Address : Record;
        }

        namespace EntityNamespace
        {
            public class Order : Record;
        }
        """;

    private const string ExpectedGeneratedCodeText = """
        // <auto-generated/>

        namespace SurrealDb.Net;

        public static class EntitiesISurrealDbClientExtensions
        {
        //#if NET10_0_OR_GREATER
            extension(ISurrealDbClient source)
            {
                public Task<IEnumerable<SurrealDb.Examples.Entities.Models.Address>> Addresss => source.Select<SurrealDb.Examples.Entities.Models.Address>("Address");
                public Task<IEnumerable<SurrealDb.Examples.Entities.Models.Post>> Posts => source.Select<SurrealDb.Examples.Entities.Models.Post>("post");
            }
        //#endif
        }

        """;

    [Fact]
    public void GenerateEntitiesExtensions()
    {
        // Create an instance of the source generator.
        var generator = new EntitiesExtensionsGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(
            nameof(EntitiesExtensionsGeneratorTests),
            [CSharpSyntaxTree.ParseText(OriginSourceCodeText)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(TableAttribute).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(ISurrealDbClient).Assembly.Location),
            ]
        );

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t =>
            t.FilePath.EndsWith("MyEntitiesGenerator.g.cs")
        );

        // Complex generators should be tested using text comparison.
        Assert.Equal(
            ExpectedGeneratedCodeText,
            generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true
        );
    }
}
